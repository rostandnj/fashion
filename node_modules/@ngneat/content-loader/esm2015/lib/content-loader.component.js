/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, Input, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
/**
 * @return {?}
 */
function uid() {
    return Math.random()
        .toString(36)
        .substring(2);
}
export class ContentLoaderComponent {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.animate = true;
        this.baseUrl = '';
        this.width = 400;
        this.height = 130;
        this.speed = 2;
        this.preserveAspectRatio = 'xMidYMid meet';
        this.primaryColor = '#f9f9f9';
        this.secondaryColor = '#ecebeb';
        this.primaryOpacity = 1;
        this.secondaryOpacity = 1;
        this.ignoreBaseUrl = false;
        this.idClip = uid();
        this.idGradient = uid();
        this.defautlAnimation = ['-3; 1', '-2; 2', '-1; 3'];
        this.rtlAnimation = ['1; -3', '2; -2', '3; -1'];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.animationValues = this.rtl ? this.rtlAnimation : this.defautlAnimation;
        if (this.baseUrl === '' && !this.ignoreBaseUrl && isPlatformBrowser(this.platformId)) {
            this.baseUrl = window.location.pathname;
        }
        this.setFillStyle();
        this.setClipStyle();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['baseUrl']) {
            if (changes['baseUrl'].previousValue !== changes['baseUrl'].currentValue) {
                this.setFillStyle();
                this.setClipStyle();
            }
        }
    }
    /**
     * @return {?}
     */
    setFillStyle() {
        this.fillStyle = {
            fill: `url(${this.baseUrl}#${this.idGradient})`
        };
    }
    /**
     * @return {?}
     */
    setClipStyle() {
        this.clipStyle = `url(${this.baseUrl}#${this.idClip})`;
    }
}
ContentLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'content-loader',
                template: "<svg attr.viewBox=\"0 0 {{width}} {{height}}\" [attr.preserveAspectRatio]=\"preserveAspectRatio\" [ngStyle]=\"style\">\n\n  <rect [attr.clip-path]=\"clipStyle\" [ngStyle]=\"fillStyle\" x=\"0\" y=\"0\" [attr.width]=\"width\" [attr.height]=\"height\" />\n\n  <defs>\n\n    <clipPath [attr.id]=\"idClip\">\n      <ng-content></ng-content>\n    </clipPath>\n\n    <linearGradient [attr.id]=\"idGradient\">\n\n      <stop offset=\"0%\" [attr.stop-color]=\"primaryColor\" [attr.stop-opacity]=\"primaryOpacity\">\n        <ng-container *ngIf=\"animate\">\n          <animate attributeName=\"offset\" [attr.values]=\"animationValues[0]\" attr.dur={{speed}} s repeatCount=\"indefinite\" />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"50%\" [attr.stop-color]=\"secondaryColor\" [attr.stop-opacity]=\"secondaryOpacity\">\n        <ng-container *ngIf=\"animate\">\n          <animate attributeName=\"offset\" [attr.values]=\"animationValues[1]\" attr.dur={{speed}} s repeatCount=\"indefinite\" />\n        </ng-container>\n      </stop>\n\n      <stop offset=\"100%\" [attr.stop-color]=\"primaryColor\" [attr.stop-opacity]=\"primaryOpacity\">\n        <ng-container *ngIf=\"animate\">\n          <animate attributeName=\"offset\" [attr.values]=\"animationValues[2]\" attr.dur={{speed}} s repeatCount=\"indefinite\" />\n        </ng-container>\n      </stop>\n\n    </linearGradient>\n\n  </defs>\n\n</svg>\n"
            }] }
];
/** @nocollapse */
ContentLoaderComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ContentLoaderComponent.propDecorators = {
    animate: [{ type: Input }],
    baseUrl: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    speed: [{ type: Input }],
    preserveAspectRatio: [{ type: Input }],
    primaryColor: [{ type: Input }],
    secondaryColor: [{ type: Input }],
    primaryOpacity: [{ type: Input }],
    secondaryOpacity: [{ type: Input }],
    uniqueKey: [{ type: Input }],
    rtl: [{ type: Input }],
    style: [{ type: Input }],
    ignoreBaseUrl: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ContentLoaderComponent.prototype.animate;
    /** @type {?} */
    ContentLoaderComponent.prototype.baseUrl;
    /** @type {?} */
    ContentLoaderComponent.prototype.width;
    /** @type {?} */
    ContentLoaderComponent.prototype.height;
    /** @type {?} */
    ContentLoaderComponent.prototype.speed;
    /** @type {?} */
    ContentLoaderComponent.prototype.preserveAspectRatio;
    /** @type {?} */
    ContentLoaderComponent.prototype.primaryColor;
    /** @type {?} */
    ContentLoaderComponent.prototype.secondaryColor;
    /** @type {?} */
    ContentLoaderComponent.prototype.primaryOpacity;
    /** @type {?} */
    ContentLoaderComponent.prototype.secondaryOpacity;
    /** @type {?} */
    ContentLoaderComponent.prototype.uniqueKey;
    /** @type {?} */
    ContentLoaderComponent.prototype.rtl;
    /** @type {?} */
    ContentLoaderComponent.prototype.style;
    /** @type {?} */
    ContentLoaderComponent.prototype.ignoreBaseUrl;
    /** @type {?} */
    ContentLoaderComponent.prototype.idClip;
    /** @type {?} */
    ContentLoaderComponent.prototype.idGradient;
    /** @type {?} */
    ContentLoaderComponent.prototype.defautlAnimation;
    /** @type {?} */
    ContentLoaderComponent.prototype.rtlAnimation;
    /** @type {?} */
    ContentLoaderComponent.prototype.animationValues;
    /** @type {?} */
    ContentLoaderComponent.prototype.fillStyle;
    /** @type {?} */
    ContentLoaderComponent.prototype.clipStyle;
    /**
     * @type {?}
     * @private
     */
    ContentLoaderComponent.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1sb2FkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jb250ZW50LWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50LWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBcUIsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUVwRCxTQUFTLEdBQUc7SUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDakIsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBTUQsTUFBTSxPQUFPLHNCQUFzQjs7OztJQXVDakMsWUFBeUMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQXRDbEQsWUFBTyxHQUFHLElBQUksQ0FBQztRQUVmLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFFYixVQUFLLEdBQUcsR0FBRyxDQUFDO1FBRVosV0FBTSxHQUFHLEdBQUcsQ0FBQztRQUViLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFVix3QkFBbUIsR0FBRyxlQUFlLENBQUM7UUFFdEMsaUJBQVksR0FBRyxTQUFTLENBQUM7UUFFekIsbUJBQWMsR0FBRyxTQUFTLENBQUM7UUFFM0IsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFFbkIscUJBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBUXJCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBRS9CLFdBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLGVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVuQixxQkFBZ0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0MsaUJBQVksR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFNbUIsQ0FBQzs7OztJQUUvRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFFNUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BGLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsS0FBSyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxFQUFFO2dCQUN4RSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUNyQjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsU0FBUyxHQUFHO1lBQ2YsSUFBSSxFQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHO1NBQ2hELENBQUM7SUFDSixDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztJQUN6RCxDQUFDOzs7WUF6RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLG01Q0FBOEM7YUFDL0M7Ozs7eUNBd0NjLE1BQU0sU0FBQyxXQUFXOzs7c0JBdEM5QixLQUFLO3NCQUVMLEtBQUs7b0JBRUwsS0FBSztxQkFFTCxLQUFLO29CQUVMLEtBQUs7a0NBRUwsS0FBSzsyQkFFTCxLQUFLOzZCQUVMLEtBQUs7NkJBRUwsS0FBSzsrQkFFTCxLQUFLO3dCQUVMLEtBQUs7a0JBRUwsS0FBSztvQkFFTCxLQUFLOzRCQUVMLEtBQUs7Ozs7SUExQk4seUNBQXdCOztJQUV4Qix5Q0FBc0I7O0lBRXRCLHVDQUFxQjs7SUFFckIsd0NBQXNCOztJQUV0Qix1Q0FBbUI7O0lBRW5CLHFEQUErQzs7SUFFL0MsOENBQWtDOztJQUVsQyxnREFBb0M7O0lBRXBDLGdEQUE0Qjs7SUFFNUIsa0RBQThCOztJQUU5QiwyQ0FBbUI7O0lBRW5CLHFDQUFhOztJQUViLHVDQUFlOztJQUVmLCtDQUErQjs7SUFFL0Isd0NBQWU7O0lBQ2YsNENBQW1COztJQUVuQixrREFBK0M7O0lBQy9DLDhDQUEyQzs7SUFDM0MsaURBQWdCOztJQUVoQiwyQ0FBNEI7O0lBQzVCLDJDQUFrQjs7Ozs7SUFFTiw0Q0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBQTEFURk9STV9JRCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5mdW5jdGlvbiB1aWQoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpXG4gICAgLnRvU3RyaW5nKDM2KVxuICAgIC5zdWJzdHJpbmcoMik7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvbnRlbnQtbG9hZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbnRlbnQtbG9hZGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50TG9hZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBhbmltYXRlID0gdHJ1ZTtcblxuICBASW5wdXQoKSBiYXNlVXJsID0gJyc7XG5cbiAgQElucHV0KCkgd2lkdGggPSA0MDA7XG5cbiAgQElucHV0KCkgaGVpZ2h0ID0gMTMwO1xuXG4gIEBJbnB1dCgpIHNwZWVkID0gMjtcblxuICBASW5wdXQoKSBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gJ3hNaWRZTWlkIG1lZXQnO1xuXG4gIEBJbnB1dCgpIHByaW1hcnlDb2xvciA9ICcjZjlmOWY5JztcblxuICBASW5wdXQoKSBzZWNvbmRhcnlDb2xvciA9ICcjZWNlYmViJztcblxuICBASW5wdXQoKSBwcmltYXJ5T3BhY2l0eSA9IDE7XG5cbiAgQElucHV0KCkgc2Vjb25kYXJ5T3BhY2l0eSA9IDE7XG5cbiAgQElucHV0KCkgdW5pcXVlS2V5O1xuXG4gIEBJbnB1dCgpIHJ0bDtcblxuICBASW5wdXQoKSBzdHlsZTtcblxuICBASW5wdXQoKSBpZ25vcmVCYXNlVXJsID0gZmFsc2U7XG5cbiAgaWRDbGlwID0gdWlkKCk7XG4gIGlkR3JhZGllbnQgPSB1aWQoKTtcblxuICBkZWZhdXRsQW5pbWF0aW9uID0gWyctMzsgMScsICctMjsgMicsICctMTsgMyddO1xuICBydGxBbmltYXRpb24gPSBbJzE7IC0zJywgJzI7IC0yJywgJzM7IC0xJ107XG4gIGFuaW1hdGlvblZhbHVlcztcblxuICBmaWxsU3R5bGU6IHsgZmlsbDogc3RyaW5nIH07XG4gIGNsaXBTdHlsZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogc3RyaW5nKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYW5pbWF0aW9uVmFsdWVzID0gdGhpcy5ydGwgPyB0aGlzLnJ0bEFuaW1hdGlvbiA6IHRoaXMuZGVmYXV0bEFuaW1hdGlvbjtcblxuICAgIGlmICh0aGlzLmJhc2VVcmwgPT09ICcnICYmICF0aGlzLmlnbm9yZUJhc2VVcmwgJiYgaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5iYXNlVXJsID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH1cblxuICAgIHRoaXMuc2V0RmlsbFN0eWxlKCk7XG4gICAgdGhpcy5zZXRDbGlwU3R5bGUoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1snYmFzZVVybCddKSB7XG4gICAgICBpZiAoY2hhbmdlc1snYmFzZVVybCddLnByZXZpb3VzVmFsdWUgIT09IGNoYW5nZXNbJ2Jhc2VVcmwnXS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxsU3R5bGUoKTtcbiAgICAgICAgdGhpcy5zZXRDbGlwU3R5bGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRGaWxsU3R5bGUoKSB7XG4gICAgdGhpcy5maWxsU3R5bGUgPSB7XG4gICAgICBmaWxsOiBgdXJsKCR7dGhpcy5iYXNlVXJsfSMke3RoaXMuaWRHcmFkaWVudH0pYFxuICAgIH07XG4gIH1cblxuICBzZXRDbGlwU3R5bGUoKSB7XG4gICAgdGhpcy5jbGlwU3R5bGUgPSBgdXJsKCR7dGhpcy5iYXNlVXJsfSMke3RoaXMuaWRDbGlwfSlgO1xuICB9XG59XG4iXX0=