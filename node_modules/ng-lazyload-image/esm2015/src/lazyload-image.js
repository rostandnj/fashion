import { of } from 'rxjs';
import { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';
export function lazyLoadImage(hookSet, attributes) {
    return (evntObservable) => {
        return evntObservable.pipe(tap(data => attributes.onStateChange.emit({ reason: 'observer-emit', data })), filter(event => hookSet.isVisible({
            element: attributes.element,
            event: event,
            offset: attributes.offset,
            scrollContainer: attributes.scrollContainer
        })), take(1), tap(() => attributes.onStateChange.emit({ reason: 'start-loading' })), mergeMap(() => hookSet.loadImage(attributes)), tap(() => attributes.onStateChange.emit({ reason: 'mount-image' })), tap(imagePath => hookSet.setLoadedImage({
            element: attributes.element,
            imagePath,
            useSrcset: attributes.useSrcset
        })), tap(() => attributes.onStateChange.emit({ reason: 'loading-succeeded' })), map(() => true), catchError(error => {
            attributes.onStateChange.emit({ reason: 'loading-failed', data: error });
            hookSet.setErrorImage(attributes);
            return of(false);
        }), tap(() => {
            attributes.onStateChange.emit({ reason: 'finally' });
            hookSet.finally(attributes);
        }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1sYXp5bG9hZC1pbWFnZS8iLCJzb3VyY2VzIjpbInNyYy9sYXp5bG9hZC1pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzlFLE1BQU0sVUFBVSxhQUFhLENBQUksT0FBbUIsRUFBRSxVQUFzQjtJQUMxRSxPQUFPLENBQUMsY0FBNkIsRUFBdUIsRUFBRTtRQUM1RCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQzdFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNiLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDaEIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO1lBQzNCLEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO1lBQ3pCLGVBQWUsRUFBRSxVQUFVLENBQUMsZUFBZTtTQUM1QyxDQUFDLENBQ0gsRUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFDckUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDN0MsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFDbkUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQ2QsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUNyQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDM0IsU0FBUztZQUNULFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztTQUNoQyxDQUFDLENBQ0gsRUFDRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEVBQ3pFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZixVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakIsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDekUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1AsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUNyRCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUNvQixDQUFDO0lBQzNCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZmlsdGVyLCBtYXAsIG1lcmdlTWFwLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBIb29rU2V0IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5TG9hZEltYWdlPEU+KGhvb2tTZXQ6IEhvb2tTZXQ8RT4sIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIChldm50T2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxFPik6IE9ic2VydmFibGU8Ym9vbGVhbj4gPT4ge1xuICAgIHJldHVybiBldm50T2JzZXJ2YWJsZS5waXBlKFxuICAgICAgdGFwKGRhdGEgPT4gYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdvYnNlcnZlci1lbWl0JywgZGF0YSB9KSksXG4gICAgICBmaWx0ZXIoZXZlbnQgPT5cbiAgICAgICAgaG9va1NldC5pc1Zpc2libGUoe1xuICAgICAgICAgIGVsZW1lbnQ6IGF0dHJpYnV0ZXMuZWxlbWVudCxcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgb2Zmc2V0OiBhdHRyaWJ1dGVzLm9mZnNldCxcbiAgICAgICAgICBzY3JvbGxDb250YWluZXI6IGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHRhcCgoKSA9PiBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ3N0YXJ0LWxvYWRpbmcnIH0pKSxcbiAgICAgIG1lcmdlTWFwKCgpID0+IGhvb2tTZXQubG9hZEltYWdlKGF0dHJpYnV0ZXMpKSxcbiAgICAgIHRhcCgoKSA9PiBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ21vdW50LWltYWdlJyB9KSksXG4gICAgICB0YXAoaW1hZ2VQYXRoID0+XG4gICAgICAgIGhvb2tTZXQuc2V0TG9hZGVkSW1hZ2Uoe1xuICAgICAgICAgIGVsZW1lbnQ6IGF0dHJpYnV0ZXMuZWxlbWVudCxcbiAgICAgICAgICBpbWFnZVBhdGgsXG4gICAgICAgICAgdXNlU3Jjc2V0OiBhdHRyaWJ1dGVzLnVzZVNyY3NldFxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHRhcCgoKSA9PiBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ2xvYWRpbmctc3VjY2VlZGVkJyB9KSksXG4gICAgICBtYXAoKCkgPT4gdHJ1ZSksXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdsb2FkaW5nLWZhaWxlZCcsIGRhdGE6IGVycm9yIH0pO1xuICAgICAgICBob29rU2V0LnNldEVycm9ySW1hZ2UoYXR0cmlidXRlcyk7XG4gICAgICAgIHJldHVybiBvZihmYWxzZSk7XG4gICAgICB9KSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnZmluYWxseScgfSk7XG4gICAgICAgIGhvb2tTZXQuZmluYWxseShhdHRyaWJ1dGVzKTtcbiAgICAgIH0pXG4gICAgKSBhcyBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICB9O1xufVxuIl19