import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
const scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export const getScrollListener = (scrollTarget) => {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        return empty();
    }
    const scrollListener = scrollListeners.get(scrollTarget);
    if (scrollListener) {
        return scrollListener;
    }
    const srollEvent = Observable.create((observer) => {
        const eventName = 'scroll';
        const handler = (event) => observer.next(event);
        const options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return () => scrollTarget.removeEventListener(eventName, handler, options);
    });
    const listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQXdCLENBQUM7QUFFNUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLEdBQWtCLEVBQUUsU0FBZTtJQUNyRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsdUVBQXVFO0FBQ3ZFLDZEQUE2RDtBQUM3RCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFlBQW1DLEVBQTBCLEVBQUU7SUFDL0YsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPLFlBQVksQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7UUFDeEUsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLEdBQUcseURBQXlELENBQUMsQ0FBQztRQUNsSCxPQUFPLEtBQUssRUFBRSxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUVELE1BQU0sVUFBVSxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO1FBQ25GLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxNQUFNLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ2xELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1QyxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbXB0eSwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2FtcGxlVGltZSwgc2hhcmUsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3Qgc2Nyb2xsTGlzdGVuZXJzID0gbmV3IFdlYWtNYXA8YW55LCBPYnNlcnZhYmxlPGFueT4+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGVPYnNlcnZhYmxlPFQ+KG9iczogT2JzZXJ2YWJsZTxUPiwgc2NoZWR1bGVyPzogYW55KTogT2JzZXJ2YWJsZTxUIHwgJyc+IHtcbiAgcmV0dXJuIG9icy5waXBlKHNhbXBsZVRpbWUoMTAwLCBzY2hlZHVsZXIpLCBzaGFyZSgpLCBzdGFydFdpdGgoJycpKTtcbn1cblxuLy8gT25seSBjcmVhdGUgb25lIHNjcm9sbCBsaXN0ZW5lciBwZXIgdGFyZ2V0IGFuZCBzaGFyZSB0aGUgb2JzZXJ2YWJsZS5cbi8vIFR5cGljYWwsIHRoZXJlIHdpbGwgb25seSBiZSBvbmUgb2JzZXJ2YWJsZSBwZXIgYXBwbGljYXRpb25cbmV4cG9ydCBjb25zdCBnZXRTY3JvbGxMaXN0ZW5lciA9IChzY3JvbGxUYXJnZXQ/OiBIVE1MRWxlbWVudCB8IFdpbmRvdyk6IE9ic2VydmFibGU8RXZlbnQgfCAnJz4gPT4ge1xuICBpZiAoIXNjcm9sbFRhcmdldCB8fCB0eXBlb2Ygc2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLndhcm4oJ2BhZGRFdmVudExpc3RlbmVyYCBvbiAnICsgc2Nyb2xsVGFyZ2V0ICsgJyAoc2Nyb2xsVGFyZ2V0KSBpcyBub3QgYSBmdW5jdGlvbi4gU2tpcHBpbmcgdGhpcyB0YXJnZXQnKTtcbiAgICByZXR1cm4gZW1wdHkoKTtcbiAgfVxuICBjb25zdCBzY3JvbGxMaXN0ZW5lciA9IHNjcm9sbExpc3RlbmVycy5nZXQoc2Nyb2xsVGFyZ2V0KTtcbiAgaWYgKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHNjcm9sbExpc3RlbmVyO1xuICB9XG5cbiAgY29uc3Qgc3JvbGxFdmVudDogT2JzZXJ2YWJsZTxFdmVudD4gPSBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IFN1YmplY3Q8RXZlbnQ+KSA9PiB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gJ3Njcm9sbCc7XG4gICAgY29uc3QgaGFuZGxlciA9IChldmVudDogRXZlbnQpID0+IG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH07XG4gICAgc2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4gc2Nyb2xsVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfSk7XG5cbiAgY29uc3QgbGlzdGVuZXIgPSBzYW1wbGVPYnNlcnZhYmxlKHNyb2xsRXZlbnQpO1xuICBzY3JvbGxMaXN0ZW5lcnMuc2V0KHNjcm9sbFRhcmdldCwgbGlzdGVuZXIpO1xuICByZXR1cm4gbGlzdGVuZXI7XG59O1xuIl19