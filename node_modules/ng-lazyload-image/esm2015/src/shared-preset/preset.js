import { addCssClassName, cssClassNames, hasCssClassName, isChildOfPicture, isImageElement, removeCssClassName, setImage, setImageAndSourcesToDefault, setImageAndSourcesToError, setImageAndSourcesToLazy, setSourcesToLazy } from '../util';
const end = ({ element }) => {
    addCssClassName(element, cssClassNames.loaded);
    removeCssClassName(element, cssClassNames.loading);
};
const ɵ0 = end;
export const loadImage = ({ element, useSrcset, imagePath, decode }) => {
    let img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        const parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset && 'srcset' in img) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    if (decode && img.decode) {
        return img.decode().then(() => imagePath);
    }
    return new Promise((resolve, reject) => {
        img.onload = () => resolve(imagePath);
        img.onerror = () => reject(null);
    });
};
const setErrorImage = ({ element, errorImagePath, useSrcset }) => {
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
const ɵ1 = setErrorImage;
const setLoadedImage = ({ element, imagePath, useSrcset }) => {
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
const ɵ2 = setLoadedImage;
const setup = ({ element, defaultImagePath, useSrcset }) => {
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    addCssClassName(element, cssClassNames.loading);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
const ɵ3 = setup;
export const isBot = navigator => {
    if (navigator && navigator.userAgent) {
        return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);
    }
    return false;
};
export const sharedPreset = {
    finally: end,
    loadImage,
    setErrorImage,
    setLoadedImage,
    setup,
    isBot
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ2IsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUiwyQkFBMkIsRUFDM0IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QixnQkFBZ0IsRUFDakIsTUFBTSxTQUFTLENBQUM7QUFFakIsTUFBTSxHQUFHLEdBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7SUFDckMsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0Msa0JBQWtCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtJQUNsRixJQUFJLEdBQXFCLENBQUM7SUFDMUIsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFVBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUF1QixDQUFDO1FBQzlFLEdBQUcsR0FBRyxXQUFXLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsUUFBUSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDckM7U0FBTTtRQUNMLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2xCLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDNUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLEdBQUcsRUFBRTtZQUNoQyxHQUFHLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN4QjthQUFNO1lBQ0wsR0FBRyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDckI7S0FDRjtJQUVELElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7UUFDeEIsT0FBTyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFvQixDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQ2hGLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sY0FBYyxHQUFxQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQzdFLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sS0FBSyxHQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtJQUNsRSwyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbEUsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFaEQsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRCxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBWSxTQUFTLENBQUMsRUFBRTtJQUN4QyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3BDLE9BQU8sNE5BQTROLENBQUMsSUFBSSxDQUN0TyxTQUFTLENBQUMsU0FBUyxDQUNwQixDQUFDO0tBQ0g7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMxQixPQUFPLEVBQUUsR0FBRztJQUNaLFNBQVM7SUFDVCxhQUFhO0lBQ2IsY0FBYztJQUNkLEtBQUs7SUFDTCxLQUFLO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbmFsbHlGbiwgSXNCb3RGbiwgTG9hZEltYWdlRm4sIFNldEVycm9ySW1hZ2VGbiwgU2V0TG9hZGVkSW1hZ2VGbiwgU2V0dXBGbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIGFkZENzc0NsYXNzTmFtZSxcbiAgY3NzQ2xhc3NOYW1lcyxcbiAgaGFzQ3NzQ2xhc3NOYW1lLFxuICBpc0NoaWxkT2ZQaWN0dXJlLFxuICBpc0ltYWdlRWxlbWVudCxcbiAgcmVtb3ZlQ3NzQ2xhc3NOYW1lLFxuICBzZXRJbWFnZSxcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9EZWZhdWx0LFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0Vycm9yLFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenksXG4gIHNldFNvdXJjZXNUb0xhenlcbn0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGVuZDogRmluYWxseUZuID0gKHsgZWxlbWVudCB9KSA9PiB7XG4gIGFkZENzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRpbmcpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRJbWFnZTogTG9hZEltYWdlRm4gPSAoeyBlbGVtZW50LCB1c2VTcmNzZXQsIGltYWdlUGF0aCwgZGVjb2RlIH0pID0+IHtcbiAgbGV0IGltZzogSFRNTEltYWdlRWxlbWVudDtcbiAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGlzQ2hpbGRPZlBpY3R1cmUoZWxlbWVudCkpIHtcbiAgICBjb25zdCBwYXJlbnRDbG9uZSA9IGVsZW1lbnQucGFyZW50Tm9kZSEuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxQaWN0dXJlRWxlbWVudDtcbiAgICBpbWcgPSBwYXJlbnRDbG9uZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJylbMF07XG4gICAgc2V0U291cmNlc1RvTGF6eShpbWcpO1xuICAgIHNldEltYWdlKGltZywgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICB9IGVsc2Uge1xuICAgIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGlmIChpc0ltYWdlRWxlbWVudChlbGVtZW50KSAmJiBlbGVtZW50LnNpemVzKSB7XG4gICAgICBpbWcuc2l6ZXMgPSBlbGVtZW50LnNpemVzO1xuICAgIH1cbiAgICBpZiAodXNlU3Jjc2V0ICYmICdzcmNzZXQnIGluIGltZykge1xuICAgICAgaW1nLnNyY3NldCA9IGltYWdlUGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nLnNyYyA9IGltYWdlUGF0aDtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVjb2RlICYmIGltZy5kZWNvZGUpIHtcbiAgICByZXR1cm4gaW1nLmRlY29kZSgpLnRoZW4oKCkgPT4gaW1hZ2VQYXRoKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1hZ2VQYXRoKTtcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChudWxsKTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRFcnJvckltYWdlOiBTZXRFcnJvckltYWdlRm4gPSAoeyBlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0IH0pID0+IHtcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcihlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMuZmFpbGVkKTtcbn07XG5cbmNvbnN0IHNldExvYWRlZEltYWdlOiBTZXRMb2FkZWRJbWFnZUZuID0gKHsgZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenkoZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xufTtcblxuY29uc3Qgc2V0dXA6IFNldHVwRm4gPSAoeyBlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQoZWxlbWVudCwgZGVmYXVsdEltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGluZyk7XG5cbiAgaWYgKGhhc0Nzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCkpIHtcbiAgICByZW1vdmVDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5sb2FkZWQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaXNCb3Q6IElzQm90Rm4gPSBuYXZpZ2F0b3IgPT4ge1xuICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICByZXR1cm4gL2dvb2dsZWJvdHxiaW5nYm90fHlhbmRleHxiYWlkdXNwaWRlcnxmYWNlYm9va2V4dGVybmFsaGl0fHR3aXR0ZXJib3R8cm9nZXJib3R8bGlua2VkaW5ib3R8ZW1iZWRseXxxdW9yYVxcIGxpbmtcXCBwcmV2aWV3fHNob3d5b3Vib3R8b3V0YnJhaW58cGludGVyZXN0XFwvMFxcLnxwaW50ZXJlc3Rib3R8c2xhY2tib3R8dmtTaGFyZXxXM0NfVmFsaWRhdG9yfHdoYXRzYXBwfGR1Y2tkdWNrYm90L2kudGVzdChcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRQcmVzZXQgPSB7XG4gIGZpbmFsbHk6IGVuZCxcbiAgbG9hZEltYWdlLFxuICBzZXRFcnJvckltYWdlLFxuICBzZXRMb2FkZWRJbWFnZSxcbiAgc2V0dXAsXG4gIGlzQm90XG59O1xuIl19