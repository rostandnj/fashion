import { of } from 'rxjs';
import { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';
export function lazyLoadImage(hookSet, attributes) {
    return function (evntObservable) {
        return evntObservable.pipe(tap(function (data) { return attributes.onStateChange.emit({ reason: 'observer-emit', data: data }); }), filter(function (event) {
            return hookSet.isVisible({
                element: attributes.element,
                event: event,
                offset: attributes.offset,
                scrollContainer: attributes.scrollContainer
            });
        }), take(1), tap(function () { return attributes.onStateChange.emit({ reason: 'start-loading' }); }), mergeMap(function () { return hookSet.loadImage(attributes); }), tap(function () { return attributes.onStateChange.emit({ reason: 'mount-image' }); }), tap(function (imagePath) {
            return hookSet.setLoadedImage({
                element: attributes.element,
                imagePath: imagePath,
                useSrcset: attributes.useSrcset
            });
        }), tap(function () { return attributes.onStateChange.emit({ reason: 'loading-succeeded' }); }), map(function () { return true; }), catchError(function (error) {
            attributes.onStateChange.emit({ reason: 'loading-failed', data: error });
            hookSet.setErrorImage(attributes);
            return of(false);
        }), tap(function () {
            attributes.onStateChange.emit({ reason: 'finally' });
            hookSet.finally(attributes);
        }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1sYXp5bG9hZC1pbWFnZS8iLCJzb3VyY2VzIjpbInNyYy9sYXp5bG9hZC1pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzlFLE1BQU0sVUFBVSxhQUFhLENBQUksT0FBbUIsRUFBRSxVQUFzQjtJQUMxRSxPQUFPLFVBQUMsY0FBNkI7UUFDbkMsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQyxFQUFoRSxDQUFnRSxDQUFDLEVBQzdFLE1BQU0sQ0FBQyxVQUFBLEtBQUs7WUFDVixPQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUM7Z0JBQ2hCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztnQkFDM0IsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO2dCQUN6QixlQUFlLEVBQUUsVUFBVSxDQUFDLGVBQWU7YUFDNUMsQ0FBQztRQUxGLENBS0UsQ0FDSCxFQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsY0FBTSxPQUFBLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQTFELENBQTBELENBQUMsRUFDckUsUUFBUSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUE3QixDQUE2QixDQUFDLEVBQzdDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUMsRUFBeEQsQ0FBd0QsQ0FBQyxFQUNuRSxHQUFHLENBQUMsVUFBQSxTQUFTO1lBQ1gsT0FBQSxPQUFPLENBQUMsY0FBYyxDQUFDO2dCQUNyQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87Z0JBQzNCLFNBQVMsV0FBQTtnQkFDVCxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7YUFDaEMsQ0FBQztRQUpGLENBSUUsQ0FDSCxFQUNELEdBQUcsQ0FBQyxjQUFNLE9BQUEsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUE5RCxDQUE4RCxDQUFDLEVBQ3pFLEdBQUcsQ0FBQyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyxFQUNmLFVBQVUsQ0FBQyxVQUFBLEtBQUs7WUFDZCxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RSxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQztZQUNGLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDckQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FDb0IsQ0FBQztJQUMzQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbHRlciwgbWFwLCBtZXJnZU1hcCwgdGFrZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXR0cmlidXRlcywgSG9va1NldCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGF6eUxvYWRJbWFnZTxFPihob29rU2V0OiBIb29rU2V0PEU+LCBhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzKSB7XG4gIHJldHVybiAoZXZudE9ic2VydmFibGU6IE9ic2VydmFibGU8RT4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0+IHtcbiAgICByZXR1cm4gZXZudE9ic2VydmFibGUucGlwZShcbiAgICAgIHRhcChkYXRhID0+IGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnb2JzZXJ2ZXItZW1pdCcsIGRhdGEgfSkpLFxuICAgICAgZmlsdGVyKGV2ZW50ID0+XG4gICAgICAgIGhvb2tTZXQuaXNWaXNpYmxlKHtcbiAgICAgICAgICBlbGVtZW50OiBhdHRyaWJ1dGVzLmVsZW1lbnQsXG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIG9mZnNldDogYXR0cmlidXRlcy5vZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsQ29udGFpbmVyOiBhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lclxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHRha2UoMSksXG4gICAgICB0YXAoKCkgPT4gYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdzdGFydC1sb2FkaW5nJyB9KSksXG4gICAgICBtZXJnZU1hcCgoKSA9PiBob29rU2V0LmxvYWRJbWFnZShhdHRyaWJ1dGVzKSksXG4gICAgICB0YXAoKCkgPT4gYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdtb3VudC1pbWFnZScgfSkpLFxuICAgICAgdGFwKGltYWdlUGF0aCA9PlxuICAgICAgICBob29rU2V0LnNldExvYWRlZEltYWdlKHtcbiAgICAgICAgICBlbGVtZW50OiBhdHRyaWJ1dGVzLmVsZW1lbnQsXG4gICAgICAgICAgaW1hZ2VQYXRoLFxuICAgICAgICAgIHVzZVNyY3NldDogYXR0cmlidXRlcy51c2VTcmNzZXRcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICB0YXAoKCkgPT4gYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdsb2FkaW5nLXN1Y2NlZWRlZCcgfSkpLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgIGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnbG9hZGluZy1mYWlsZWQnLCBkYXRhOiBlcnJvciB9KTtcbiAgICAgICAgaG9va1NldC5zZXRFcnJvckltYWdlKGF0dHJpYnV0ZXMpO1xuICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xuICAgICAgfSksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ2ZpbmFsbHknIH0pO1xuICAgICAgICBob29rU2V0LmZpbmFsbHkoYXR0cmlidXRlcyk7XG4gICAgICB9KVxuICAgICkgYXMgT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgfTtcbn1cbiJdfQ==