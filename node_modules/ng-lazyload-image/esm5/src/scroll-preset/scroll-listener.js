import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
var scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export var getScrollListener = function (scrollTarget) {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        return empty();
    }
    var scrollListener = scrollListeners.get(scrollTarget);
    if (scrollListener) {
        return scrollListener;
    }
    var srollEvent = Observable.create(function (observer) {
        var eventName = 'scroll';
        var handler = function (event) { return observer.next(event); };
        var options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return function () { return scrollTarget.removeEventListener(eventName, handler, options); };
    });
    var listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsSUFBTSxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQXdCLENBQUM7QUFFNUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLEdBQWtCLEVBQUUsU0FBZTtJQUNyRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsdUVBQXVFO0FBQ3ZFLDZEQUE2RDtBQUM3RCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxVQUFDLFlBQW1DO0lBQ25FLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTyxZQUFZLENBQUMsZ0JBQWdCLEtBQUssVUFBVSxFQUFFO1FBQ3hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLHlEQUF5RCxDQUFDLENBQUM7UUFDbEgsT0FBTyxLQUFLLEVBQUUsQ0FBQztLQUNoQjtJQUNELElBQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekQsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxjQUFjLENBQUM7S0FDdkI7SUFFRCxJQUFNLFVBQVUsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQXdCO1FBQy9FLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixJQUFNLE9BQU8sR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXBCLENBQW9CLENBQUM7UUFDdkQsSUFBTSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNsRCxZQUFZLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxPQUFPLGNBQU0sT0FBQSxZQUFZLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBN0QsQ0FBNkQsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVtcHR5LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzYW1wbGVUaW1lLCBzaGFyZSwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBzY3JvbGxMaXN0ZW5lcnMgPSBuZXcgV2Vha01hcDxhbnksIE9ic2VydmFibGU8YW55Pj4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZU9ic2VydmFibGU8VD4ob2JzOiBPYnNlcnZhYmxlPFQ+LCBzY2hlZHVsZXI/OiBhbnkpOiBPYnNlcnZhYmxlPFQgfCAnJz4ge1xuICByZXR1cm4gb2JzLnBpcGUoc2FtcGxlVGltZSgxMDAsIHNjaGVkdWxlciksIHNoYXJlKCksIHN0YXJ0V2l0aCgnJykpO1xufVxuXG4vLyBPbmx5IGNyZWF0ZSBvbmUgc2Nyb2xsIGxpc3RlbmVyIHBlciB0YXJnZXQgYW5kIHNoYXJlIHRoZSBvYnNlcnZhYmxlLlxuLy8gVHlwaWNhbCwgdGhlcmUgd2lsbCBvbmx5IGJlIG9uZSBvYnNlcnZhYmxlIHBlciBhcHBsaWNhdGlvblxuZXhwb3J0IGNvbnN0IGdldFNjcm9sbExpc3RlbmVyID0gKHNjcm9sbFRhcmdldD86IEhUTUxFbGVtZW50IHwgV2luZG93KTogT2JzZXJ2YWJsZTxFdmVudCB8ICcnPiA9PiB7XG4gIGlmICghc2Nyb2xsVGFyZ2V0IHx8IHR5cGVvZiBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUud2FybignYGFkZEV2ZW50TGlzdGVuZXJgIG9uICcgKyBzY3JvbGxUYXJnZXQgKyAnIChzY3JvbGxUYXJnZXQpIGlzIG5vdCBhIGZ1bmN0aW9uLiBTa2lwcGluZyB0aGlzIHRhcmdldCcpO1xuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG4gIGNvbnN0IHNjcm9sbExpc3RlbmVyID0gc2Nyb2xsTGlzdGVuZXJzLmdldChzY3JvbGxUYXJnZXQpO1xuICBpZiAoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICByZXR1cm4gc2Nyb2xsTGlzdGVuZXI7XG4gIH1cblxuICBjb25zdCBzcm9sbEV2ZW50OiBPYnNlcnZhYmxlPEV2ZW50PiA9IE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogU3ViamVjdDxFdmVudD4pID0+IHtcbiAgICBjb25zdCBldmVudE5hbWUgPSAnc2Nyb2xsJztcbiAgICBjb25zdCBoYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4gb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfTtcbiAgICBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBzY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9KTtcblxuICBjb25zdCBsaXN0ZW5lciA9IHNhbXBsZU9ic2VydmFibGUoc3JvbGxFdmVudCk7XG4gIHNjcm9sbExpc3RlbmVycy5zZXQoc2Nyb2xsVGFyZ2V0LCBsaXN0ZW5lcik7XG4gIHJldHVybiBsaXN0ZW5lcjtcbn07XG4iXX0=