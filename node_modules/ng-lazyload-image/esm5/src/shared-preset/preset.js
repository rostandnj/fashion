import { addCssClassName, cssClassNames, hasCssClassName, isChildOfPicture, isImageElement, removeCssClassName, setImage, setImageAndSourcesToDefault, setImageAndSourcesToError, setImageAndSourcesToLazy, setSourcesToLazy } from '../util';
var end = function (_a) {
    var element = _a.element;
    addCssClassName(element, cssClassNames.loaded);
    removeCssClassName(element, cssClassNames.loading);
};
var ɵ0 = end;
export var loadImage = function (_a) {
    var element = _a.element, useSrcset = _a.useSrcset, imagePath = _a.imagePath, decode = _a.decode;
    var img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        var parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset && 'srcset' in img) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    if (decode && img.decode) {
        return img.decode().then(function () { return imagePath; });
    }
    return new Promise(function (resolve, reject) {
        img.onload = function () { return resolve(imagePath); };
        img.onerror = function () { return reject(null); };
    });
};
var setErrorImage = function (_a) {
    var element = _a.element, errorImagePath = _a.errorImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
var ɵ1 = setErrorImage;
var setLoadedImage = function (_a) {
    var element = _a.element, imagePath = _a.imagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
var ɵ2 = setLoadedImage;
var setup = function (_a) {
    var element = _a.element, defaultImagePath = _a.defaultImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    addCssClassName(element, cssClassNames.loading);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
var ɵ3 = setup;
export var isBot = function (navigator) {
    if (navigator && navigator.userAgent) {
        return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\ link\ preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);
    }
    return false;
};
export var sharedPreset = {
    finally: end,
    loadImage: loadImage,
    setErrorImage: setErrorImage,
    setLoadedImage: setLoadedImage,
    setup: setup,
    isBot: isBot
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ2IsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUiwyQkFBMkIsRUFDM0IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QixnQkFBZ0IsRUFDakIsTUFBTSxTQUFTLENBQUM7QUFFakIsSUFBTSxHQUFHLEdBQWMsVUFBQyxFQUFXO1FBQVQsb0JBQU87SUFDL0IsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0Msa0JBQWtCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFnQixVQUFDLEVBQXlDO1FBQXZDLG9CQUFPLEVBQUUsd0JBQVMsRUFBRSx3QkFBUyxFQUFFLGtCQUFNO0lBQzVFLElBQUksR0FBcUIsQ0FBQztJQUMxQixJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN4RCxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQXVCLENBQUM7UUFDOUUsR0FBRyxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNyQztTQUFNO1FBQ0wsR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDbEIsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUM1QyxHQUFHLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksR0FBRyxFQUFFO1lBQ2hDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3hCO2FBQU07WUFDTCxHQUFHLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztTQUNyQjtLQUNGO0lBRUQsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtRQUN4QixPQUFPLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLFNBQVMsRUFBVCxDQUFTLENBQUMsQ0FBQztLQUMzQztJQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxHQUFHLENBQUMsTUFBTSxHQUFHLGNBQU0sT0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQWxCLENBQWtCLENBQUM7UUFDdEMsR0FBRyxDQUFDLE9BQU8sR0FBRyxjQUFNLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFaLENBQVksQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLElBQU0sYUFBYSxHQUFvQixVQUFDLEVBQXNDO1FBQXBDLG9CQUFPLEVBQUUsa0NBQWMsRUFBRSx3QkFBUztJQUMxRSx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlELGVBQWUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQzs7QUFFRixJQUFNLGNBQWMsR0FBcUIsVUFBQyxFQUFpQztRQUEvQixvQkFBTyxFQUFFLHdCQUFTLEVBQUUsd0JBQVM7SUFDdkUsd0JBQXdCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMxRCxDQUFDLENBQUM7O0FBRUYsSUFBTSxLQUFLLEdBQVksVUFBQyxFQUF3QztRQUF0QyxvQkFBTyxFQUFFLHNDQUFnQixFQUFFLHdCQUFTO0lBQzVELDJCQUEyQixDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRSxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVoRCxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2xELGtCQUFrQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkQ7QUFDSCxDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFZLFVBQUEsU0FBUztJQUNyQyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3BDLE9BQU8sNE5BQTROLENBQUMsSUFBSSxDQUN0TyxTQUFTLENBQUMsU0FBUyxDQUNwQixDQUFDO0tBQ0g7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRztJQUMxQixPQUFPLEVBQUUsR0FBRztJQUNaLFNBQVMsV0FBQTtJQUNULGFBQWEsZUFBQTtJQUNiLGNBQWMsZ0JBQUE7SUFDZCxLQUFLLE9BQUE7SUFDTCxLQUFLLE9BQUE7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmluYWxseUZuLCBJc0JvdEZuLCBMb2FkSW1hZ2VGbiwgU2V0RXJyb3JJbWFnZUZuLCBTZXRMb2FkZWRJbWFnZUZuLCBTZXR1cEZuIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgYWRkQ3NzQ2xhc3NOYW1lLFxuICBjc3NDbGFzc05hbWVzLFxuICBoYXNDc3NDbGFzc05hbWUsXG4gIGlzQ2hpbGRPZlBpY3R1cmUsXG4gIGlzSW1hZ2VFbGVtZW50LFxuICByZW1vdmVDc3NDbGFzc05hbWUsXG4gIHNldEltYWdlLFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQsXG4gIHNldEltYWdlQW5kU291cmNlc1RvRXJyb3IsXG4gIHNldEltYWdlQW5kU291cmNlc1RvTGF6eSxcbiAgc2V0U291cmNlc1RvTGF6eVxufSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgZW5kOiBGaW5hbGx5Rm4gPSAoeyBlbGVtZW50IH0pID0+IHtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKTtcbiAgcmVtb3ZlQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGluZyk7XG59O1xuXG5leHBvcnQgY29uc3QgbG9hZEltYWdlOiBMb2FkSW1hZ2VGbiA9ICh7IGVsZW1lbnQsIHVzZVNyY3NldCwgaW1hZ2VQYXRoLCBkZWNvZGUgfSkgPT4ge1xuICBsZXQgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgaXNDaGlsZE9mUGljdHVyZShlbGVtZW50KSkge1xuICAgIGNvbnN0IHBhcmVudENsb25lID0gZWxlbWVudC5wYXJlbnROb2RlIS5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTFBpY3R1cmVFbGVtZW50O1xuICAgIGltZyA9IHBhcmVudENsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVswXTtcbiAgICBzZXRTb3VyY2VzVG9MYXp5KGltZyk7XG4gICAgc2V0SW1hZ2UoaW1nLCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG4gIH0gZWxzZSB7XG4gICAgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGVsZW1lbnQuc2l6ZXMpIHtcbiAgICAgIGltZy5zaXplcyA9IGVsZW1lbnQuc2l6ZXM7XG4gICAgfVxuICAgIGlmICh1c2VTcmNzZXQgJiYgJ3NyY3NldCcgaW4gaW1nKSB7XG4gICAgICBpbWcuc3Jjc2V0ID0gaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbWcuc3JjID0gaW1hZ2VQYXRoO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZWNvZGUgJiYgaW1nLmRlY29kZSkge1xuICAgIHJldHVybiBpbWcuZGVjb2RlKCkudGhlbigoKSA9PiBpbWFnZVBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWFnZVBhdGgpO1xuICAgIGltZy5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG51bGwpO1xuICB9KTtcbn07XG5cbmNvbnN0IHNldEVycm9ySW1hZ2U6IFNldEVycm9ySW1hZ2VGbiA9ICh7IGVsZW1lbnQsIGVycm9ySW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0Vycm9yKGVsZW1lbnQsIGVycm9ySW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICBhZGRDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5mYWlsZWQpO1xufTtcblxuY29uc3Qgc2V0TG9hZGVkSW1hZ2U6IFNldExvYWRlZEltYWdlRm4gPSAoeyBlbGVtZW50LCBpbWFnZVBhdGgsIHVzZVNyY3NldCB9KSA9PiB7XG4gIHNldEltYWdlQW5kU291cmNlc1RvTGF6eShlbGVtZW50LCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG59O1xuXG5jb25zdCBzZXR1cDogU2V0dXBGbiA9ICh7IGVsZW1lbnQsIGRlZmF1bHRJbWFnZVBhdGgsIHVzZVNyY3NldCB9KSA9PiB7XG4gIHNldEltYWdlQW5kU291cmNlc1RvRGVmYXVsdChlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICBhZGRDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5sb2FkaW5nKTtcblxuICBpZiAoaGFzQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKSkge1xuICAgIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc0JvdDogSXNCb3RGbiA9IG5hdmlnYXRvciA9PiB7XG4gIGlmIChuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuICAgIHJldHVybiAvZ29vZ2xlYm90fGJpbmdib3R8eWFuZGV4fGJhaWR1c3BpZGVyfGZhY2Vib29rZXh0ZXJuYWxoaXR8dHdpdHRlcmJvdHxyb2dlcmJvdHxsaW5rZWRpbmJvdHxlbWJlZGx5fHF1b3JhXFwgbGlua1xcIHByZXZpZXd8c2hvd3lvdWJvdHxvdXRicmFpbnxwaW50ZXJlc3RcXC8wXFwufHBpbnRlcmVzdGJvdHxzbGFja2JvdHx2a1NoYXJlfFczQ19WYWxpZGF0b3J8d2hhdHNhcHB8ZHVja2R1Y2tib3QvaS50ZXN0KFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNoYXJlZFByZXNldCA9IHtcbiAgZmluYWxseTogZW5kLFxuICBsb2FkSW1hZ2UsXG4gIHNldEVycm9ySW1hZ2UsXG4gIHNldExvYWRlZEltYWdlLFxuICBzZXR1cCxcbiAgaXNCb3Rcbn07XG4iXX0=