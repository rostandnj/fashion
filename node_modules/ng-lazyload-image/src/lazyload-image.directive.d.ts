import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { ModuleOptions, StateChange } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class LazyLoadImageDirective implements OnChanges, AfterContentInit, OnDestroy {
    lazyImage: string;
    defaultImage?: string;
    errorImage?: string;
    scrollTarget?: any;
    customObservable?: Observable<any>;
    offset?: number;
    useSrcset?: boolean;
    decode?: boolean;
    debug?: boolean;
    onStateChange: EventEmitter<StateChange>;
    onLoad: EventEmitter<boolean>;
    private propertyChanges$;
    private elementRef;
    private ngZone;
    private loadSubscription?;
    private debugSubscription?;
    private hooks;
    private platformId;
    constructor(el: ElementRef, ngZone: NgZone, platformId: Object, options?: ModuleOptions);
    ngOnChanges(): void;
    ngAfterContentInit(): any;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LazyLoadImageDirective, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LazyLoadImageDirective, "[lazyLoad]", never, { "lazyImage": "lazyLoad"; "defaultImage": "defaultImage"; "errorImage": "errorImage"; "scrollTarget": "scrollTarget"; "customObservable": "customObservable"; "offset": "offset"; "useSrcset": "useSrcset"; "decode": "decode"; "debug": "debug"; }, { "onStateChange": "onStateChange"; "onLoad": "onLoad"; }, never>;
}

//# sourceMappingURL=lazyload-image.directive.d.ts.map