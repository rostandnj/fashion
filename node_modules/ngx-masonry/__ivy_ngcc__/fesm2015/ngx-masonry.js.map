{"version":3,"file":"ngx-masonry.js","sources":["ngx-masonry/lib/ngx-masonry.component.ts","ngx-masonry/lib/ngx-masonry.directive.ts","ngx-masonry/lib/ngx-masonry.module.ts"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nlet imagesLoaded: any;\nlet masonryConstructor: any;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options';\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public _msnry: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() public useImagesLoaded: Boolean = false;\n  @Input() updateLayout: Boolean = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    let isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) {\n          this.layout();\n        }\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) {\n        this.layout();\n      }\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n  MutationObserver: any;\n  WebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n  constructor(\n    private _element: ElementRef,\n    @Inject(forwardRef(() => NgxMasonryComponent))\n    private _parent: NgxMasonryComponent,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.add(this._element.nativeElement);\n      this.watchForHtmlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.remove(this._element.nativeElement);\n    }\n  }\n\n  /** When HTML in brick changes dinamically, observe that and change layout */\n  private watchForHtmlChanges(): void {\n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    if (MutationObserver) {\n      /** Watch for any changes to subtree */\n      const self = this;\n      const observer = new MutationObserver(function(mutations, observerFromElement) {\n        self._parent.layout();\n      });\n\n      // define what element should be observed by the observer\n      // and what types of mutations trigger the callback\n      observer.observe(this._element.nativeElement, {\n        subtree: true,\n        childList: true\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n"]}